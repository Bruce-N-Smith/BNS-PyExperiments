{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Copy of webinar_content_students.ipynb",
      "provenance": [],
      "collapsed_sections": [
        "aAVUCIhQnvqx",
        "AOuJPAJO5N1t",
        "GDQpEkCImzL9",
        "uIsHEbLlFGtn",
        "tG5zLT6ilRUn",
        "pYDKDX3x6cXR",
        "ZiWyqK7RIelL"
      ],
      "toc_visible": true,
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Bruce-N-Smith/PyExperiments/blob/master/Copy_of_webinar_content_students.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "upgA33i96krb",
        "colab_type": "text"
      },
      "source": [
        "<p align=\"center\">\n",
        "<img src=\"https://cdn.datacamp.com/main-app/assets/brand/datacamp-horizontal-rgb-b641f95b7bdd7560b554c761a0b4910f9619907dd823c0e41244ed72078723bf.svg\" alt = \"DataCamp icon\" width=\"50%\">\n",
        "</p>\n",
        "<br><br>\n",
        "\n",
        "## **How to transition from Spreadsheets to Python**\n",
        "\n",
        "\n",
        "Welcome to this live, hands-on training where you will learn how to upgrade from being a spreadsheet user to using Python. \n",
        "\n",
        "In most organizations across all industries, data fluency, technical skills and a data-driven mindset are becoming sought after skills that drive organizational success in the digital age. This shift has spurred on the adoption of tools that go beyond spreadsheets, which allow for more robust data analysis, visualization and presentation. In this notebook, you will learn:\n",
        "\n",
        "* How to import Excel files into `pandas`.\n",
        "* Filter, add new columns, and explore DataFrames.\n",
        "* Apply common spreadsheets operations such as pivot tables and VLOOKUP in Python.\n",
        "* Present data as visualizations using `matplotlib` and `seaborn`.\n",
        "\n",
        "The dataset to be used in this webinar is an Excel file named `sales_data_dirty.xlsx` - it contains 4 sheets, each containing the following columns:\n",
        "\n",
        "<br>\n",
        "\n",
        "\n",
        "\n",
        "![alt](https://github.com/adelnehme/python-for-spreadsheet-users-webinar/blob/master/image.png?raw=true)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "aAVUCIhQnvqx",
        "colab_type": "text"
      },
      "source": [
        "## **Getting started with the dataset**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5mq4lDtxqLp6",
        "colab_type": "text"
      },
      "source": [
        "Similar to how you can download software (excel, tableau etc..) on your computer that allows you perform specific functions (data analysis, visualization ...) - Python has packages or modules that we download and install that allows to perform a set of tasks. We can also set aliases for these packages to shorten their name and make calling them more convenient."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-d04csgd6i0R",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Import relevant packages with aliases PD means Pandas\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hgWlh8epiOij",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Import the data\n",
        "data = pd.ExcelFile('https://github.com/adelnehme/python-for-spreadsheet-users-webinar/blob/master/sales_data_dirty.xlsx?raw=true')"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "EMa8uUlAidFk",
        "colab_type": "code",
        "outputId": "af6cc7a9-4bf9-45f2-e2c1-d9d7d667963b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "# Print the name of the sheets expect 4 of them\n",
        "data.sheet_names"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['sales', 'customers', 'dates', 'employees']"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WlG46zdNidzz",
        "colab_type": "code",
        "outputId": "c8cd784f-cf2f-4f82-ba23-db14e949ecf1",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 225
        }
      },
      "source": [
        "# Parse sales data put each sheet in its own object\n",
        "sales = data.parse('sales')\n",
        "# Print dimensions and glimpse\n",
        "print(sales.shape)\n",
        "sales.head(5)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(31465, 5)\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>SalesOrderID</th>\n",
              "      <th>TotalDue</th>\n",
              "      <th>NumberofItems</th>\n",
              "      <th>OnlineOrderFlag</th>\n",
              "      <th>Status</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>43659</td>\n",
              "      <td>23153.2339</td>\n",
              "      <td>12</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>43660</td>\n",
              "      <td>1457.3288</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>43661</td>\n",
              "      <td>36865.8012</td>\n",
              "      <td>15</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>43662</td>\n",
              "      <td>32474.9324</td>\n",
              "      <td>22</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>43663</td>\n",
              "      <td>472.3108</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   SalesOrderID    TotalDue  NumberofItems  OnlineOrderFlag  Status\n",
              "0         43659  23153.2339             12                0       5\n",
              "1         43660   1457.3288              2                0       5\n",
              "2         43661  36865.8012             15                0       5\n",
              "3         43662  32474.9324             22                0       5\n",
              "4         43663    472.3108              1                0       5"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HBJhclwIijLQ",
        "colab_type": "code",
        "outputId": "df09bcfe-da2b-481b-e549-12167344c728",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 225
        }
      },
      "source": [
        "# Parse customers data \n",
        "customers = data.parse('customers')\n",
        "# Print dimensions and glimpse\n",
        "print(customers.shape)\n",
        "customers.head(5)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(31465, 6)\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>SalesOrderID</th>\n",
              "      <th>CustomerFirstName</th>\n",
              "      <th>CustomerLastName</th>\n",
              "      <th>EmployeeFirstName</th>\n",
              "      <th>EmployeeLastName</th>\n",
              "      <th>ChannelType</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>43659</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Tsvi</td>\n",
              "      <td>Reiter</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>43660</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Tsvi</td>\n",
              "      <td>Reiter</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>43661</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>José</td>\n",
              "      <td>Saraiva</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>43662</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>José</td>\n",
              "      <td>Saraiva</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>43663</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Linda</td>\n",
              "      <td>Mitchell</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   SalesOrderID CustomerFirstName  ... EmployeeLastName ChannelType\n",
              "0         43659               NaN  ...           Reiter         NaN\n",
              "1         43660               NaN  ...           Reiter         NaN\n",
              "2         43661               NaN  ...          Saraiva         NaN\n",
              "3         43662               NaN  ...          Saraiva         NaN\n",
              "4         43663               NaN  ...         Mitchell         NaN\n",
              "\n",
              "[5 rows x 6 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "eLRqU9yVj8lk",
        "colab_type": "code",
        "outputId": "be3de7a6-60dd-43f3-fb68-cd95c1eddc44",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 225
        }
      },
      "source": [
        "# Parse dates data\n",
        "dates = data.parse('dates')\n",
        "# Print dimensions and glimpse\n",
        "print(dates.shape)\n",
        "dates.head(5)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(31465, 3)\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>SalesOrderID</th>\n",
              "      <th>OrderDate</th>\n",
              "      <th>ShipDate</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>43659</td>\n",
              "      <td>2011-05-31 00:00:00</td>\n",
              "      <td>2011-06-07 00:00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>43660</td>\n",
              "      <td>2011-05-31 00:00:00</td>\n",
              "      <td>2011-06-07 00:00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>43661</td>\n",
              "      <td>2011-05-31 00:00:00</td>\n",
              "      <td>2011-06-07 00:00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>43662</td>\n",
              "      <td>2011-05-31 00:00:00</td>\n",
              "      <td>2011-06-07 00:00:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>43663</td>\n",
              "      <td>2011-05-31 00:00:00</td>\n",
              "      <td>2011-06-07 00:00:00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   SalesOrderID            OrderDate             ShipDate\n",
              "0         43659  2011-05-31 00:00:00  2011-06-07 00:00:00\n",
              "1         43660  2011-05-31 00:00:00  2011-06-07 00:00:00\n",
              "2         43661  2011-05-31 00:00:00  2011-06-07 00:00:00\n",
              "3         43662  2011-05-31 00:00:00  2011-06-07 00:00:00\n",
              "4         43663  2011-05-31 00:00:00  2011-06-07 00:00:00"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dzdHh12loRMq",
        "colab_type": "code",
        "outputId": "26043e36-f32c-42f7-a89f-24116d6b59dc",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 225
        }
      },
      "source": [
        "# Parse employees data\n",
        "employees = data.parse('employees')\n",
        "# Print dimensions and glimpse\n",
        "print(employees.shape)\n",
        "employees.head(5)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(17, 5)\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>FirstName</th>\n",
              "      <th>LastName</th>\n",
              "      <th>CountryCode</th>\n",
              "      <th>RegionName</th>\n",
              "      <th>CommissionPct</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Amy</td>\n",
              "      <td>Alberts</td>\n",
              "      <td>GB</td>\n",
              "      <td>United Kingdom</td>\n",
              "      <td>0.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>David</td>\n",
              "      <td>Campbell</td>\n",
              "      <td>US</td>\n",
              "      <td>Northwest</td>\n",
              "      <td>0.012</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Garrett</td>\n",
              "      <td>Vargas</td>\n",
              "      <td>CA</td>\n",
              "      <td>Canada</td>\n",
              "      <td>0.010</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Jae</td>\n",
              "      <td>Pak</td>\n",
              "      <td>CA</td>\n",
              "      <td>Canada</td>\n",
              "      <td>0.020</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Jillian</td>\n",
              "      <td>Carson</td>\n",
              "      <td>US</td>\n",
              "      <td>Southwest</td>\n",
              "      <td>0.015</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "  FirstName  LastName CountryCode      RegionName  CommissionPct\n",
              "0       Amy   Alberts          GB  United Kingdom          0.000\n",
              "1     David  Campbell          US       Northwest          0.012\n",
              "2   Garrett    Vargas          CA          Canada          0.010\n",
              "3       Jae       Pak          CA          Canada          0.020\n",
              "4   Jillian    Carson          US       Southwest          0.015"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SOJbq0UM8Ktk",
        "colab_type": "text"
      },
      "source": [
        "## **Better understanding our data**\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tA-yPFUo2wd8",
        "colab_type": "text"
      },
      "source": [
        "Some important and common methods needed to get a better understanding of DataFrames are the following: \n",
        "\n",
        "- `.info()` provides a bird's eye view of column data types and missing values\n",
        "- `.describe()` returns a distribution of numeric columns in your DataFrame\n",
        "- `.unique()` gives out the number of unique values in a column"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yyhXh1iL4IsA",
        "colab_type": "code",
        "outputId": "6807018b-e9ff-4244-e61e-6f509da7904e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 201
        }
      },
      "source": [
        "# Understand missingness of sales data\n",
        "sales.info()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 31465 entries, 0 to 31464\n",
            "Data columns (total 5 columns):\n",
            "SalesOrderID       31465 non-null int64\n",
            "TotalDue           31465 non-null float64\n",
            "NumberofItems      31465 non-null int64\n",
            "OnlineOrderFlag    31465 non-null int64\n",
            "Status             31465 non-null int64\n",
            "dtypes: float64(1), int64(4)\n",
            "memory usage: 1.2 MB\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YtPmjfN54KsL",
        "colab_type": "code",
        "outputId": "64613b59-e2be-4409-aa24-4ee7b93a5122",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        }
      },
      "source": [
        "# Understand distribution of sales data Note here Status is similar here for all\n",
        "sales.describe()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>SalesOrderID</th>\n",
              "      <th>TotalDue</th>\n",
              "      <th>NumberofItems</th>\n",
              "      <th>OnlineOrderFlag</th>\n",
              "      <th>Status</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>31465.000000</td>\n",
              "      <td>31465.000000</td>\n",
              "      <td>31465.000000</td>\n",
              "      <td>31465.000000</td>\n",
              "      <td>31465.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>59391.000000</td>\n",
              "      <td>3915.995109</td>\n",
              "      <td>3.855617</td>\n",
              "      <td>0.879040</td>\n",
              "      <td>5.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>9083.307446</td>\n",
              "      <td>12515.462713</td>\n",
              "      <td>7.214877</td>\n",
              "      <td>0.326086</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>43659.000000</td>\n",
              "      <td>1.518300</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>5.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>51525.000000</td>\n",
              "      <td>62.951900</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>5.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>59391.000000</td>\n",
              "      <td>865.204000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>5.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>67257.000000</td>\n",
              "      <td>2615.490800</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>5.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>75123.000000</td>\n",
              "      <td>187487.825000</td>\n",
              "      <td>72.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>5.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "       SalesOrderID       TotalDue  NumberofItems  OnlineOrderFlag   Status\n",
              "count  31465.000000   31465.000000   31465.000000     31465.000000  31465.0\n",
              "mean   59391.000000    3915.995109       3.855617         0.879040      5.0\n",
              "std     9083.307446   12515.462713       7.214877         0.326086      0.0\n",
              "min    43659.000000       1.518300       1.000000         0.000000      5.0\n",
              "25%    51525.000000      62.951900       1.000000         1.000000      5.0\n",
              "50%    59391.000000     865.204000       2.000000         1.000000      5.0\n",
              "75%    67257.000000    2615.490800       3.000000         1.000000      5.0\n",
              "max    75123.000000  187487.825000      72.000000         1.000000      5.0"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Zv7IKkZ74Kzr",
        "colab_type": "code",
        "outputId": "8ea4f805-1d2a-4d0b-fdbc-70a558fc9a40",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 54
        }
      },
      "source": [
        "# Make sure Status column has no other unique values\n",
        "print(sales['Status'].unique())\n",
        "print(sales['OnlineOrderFlag'].unique())"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[5]\n",
            "[0 1]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4LXx9pOH4Lem",
        "colab_type": "code",
        "outputId": "49784713-d78c-4f36-94c5-a1f3abeed65c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 164
        }
      },
      "source": [
        "# Understand column types of dates and missingness Note no missing values and Object data type\n",
        "dates.info()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 31465 entries, 0 to 31464\n",
            "Data columns (total 3 columns):\n",
            "SalesOrderID    31465 non-null int64\n",
            "OrderDate       31465 non-null object\n",
            "ShipDate        31465 non-null object\n",
            "dtypes: int64(1), object(2)\n",
            "memory usage: 737.6+ KB\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Di0X2oT04Lcd",
        "colab_type": "code",
        "outputId": "203ff815-b89d-4638-b3ee-bd8b7baa38c5",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 219
        }
      },
      "source": [
        "# Let's understand the degree of missingness in customers dataset\n",
        "customers.info()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 31465 entries, 0 to 31464\n",
            "Data columns (total 6 columns):\n",
            "SalesOrderID         31465 non-null int64\n",
            "CustomerFirstName    17463 non-null object\n",
            "CustomerLastName     17463 non-null object\n",
            "EmployeeFirstName    3806 non-null object\n",
            "EmployeeLastName     3806 non-null object\n",
            "ChannelType          17463 non-null object\n",
            "dtypes: int64(1), object(5)\n",
            "memory usage: 1.4+ MB\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RPAMIxLxS7aO",
        "colab_type": "code",
        "outputId": "eee14c97-7304-4dae-c4da-270223274a8f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 146
        }
      },
      "source": [
        "# How to find missing values?\n",
        "customers.isna().sum()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "SalesOrderID             0\n",
              "CustomerFirstName    14002\n",
              "CustomerLastName     14002\n",
              "EmployeeFirstName    27659\n",
              "EmployeeLastName     27659\n",
              "ChannelType          14002\n",
              "dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "W23hMUxKErvf",
        "colab_type": "text"
      },
      "source": [
        "## **Making our data analysis ready**\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6wZ7nyJj4LaW",
        "colab_type": "code",
        "outputId": "8ac7c75c-829d-4481-9c3b-57e4accc9284",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 182
        }
      },
      "source": [
        "# Drop status column with Drop from sales Axis 1 is Column, inplace means don't make new object\n",
        "sales.drop('Status', axis = 1, inplace = True)\n",
        "sales.info()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 31465 entries, 0 to 31464\n",
            "Data columns (total 4 columns):\n",
            "SalesOrderID       31465 non-null int64\n",
            "TotalDue           31465 non-null float64\n",
            "NumberofItems      31465 non-null int64\n",
            "OnlineOrderFlag    31465 non-null int64\n",
            "dtypes: float64(1), int64(3)\n",
            "memory usage: 983.4 KB\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3b1XNVRd4LY8",
        "colab_type": "code",
        "outputId": "b2d80c1c-e189-441d-a2ca-3e78ac349d5c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "# Replace OnlineOrderFlag to offline and online\n",
        "sales['OnlineOrderFlag'] = sales['OnlineOrderFlag'].replace({0:'offline',\n",
        "                                                             1:'online'})\n",
        "\n",
        "# Make sure it is the case\n",
        "sales['OnlineOrderFlag'].unique()"
      ],
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['offline', 'online'], dtype=object)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SjRVVWDk4LWI",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Convert data columns to datetime while keeping only Y,m,d\n",
        "dates['OrderDate'] = pd.to_datetime(dates['OrderDate'], format = '%Y-%m-%d')\n",
        "dates['ShipDate'] = pd.to_datetime(dates['ShipDate'], format = '%Y-%m-%d')"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LXUpSdHX4LSq",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 164
        },
        "outputId": "83e27932-b681-49a2-b316-bdcaf241ec2c"
      },
      "source": [
        "# Make sure now into datetime\n",
        "dates.info()"
      ],
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 31465 entries, 0 to 31464\n",
            "Data columns (total 3 columns):\n",
            "SalesOrderID    31465 non-null int64\n",
            "OrderDate       31465 non-null datetime64[ns]\n",
            "ShipDate        31465 non-null datetime64[ns]\n",
            "dtypes: datetime64[ns](2), int64(1)\n",
            "memory usage: 737.6 KB\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "u1ND9J_54LNq",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Impute missing values based on key business assumptions\n",
        "# If employeename is missing, it means a B2C purchase\n",
        "# If employeename is not missing, it means a B2B purchase\n",
        "customers.loc[customers['EmployeeFirstName'].isnull(), 'ChannelType'] = 'B2C'\n",
        "customers.loc[customers['EmployeeLastName'].notnull(), 'ChannelType'] = 'B2B'"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3KxSjVAU4LLF",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 219
        },
        "outputId": "3e0afde2-b75a-414c-ebbe-9512ad9f9a0c"
      },
      "source": [
        "# Make sure no more missing data in ChannelType\n",
        "customers.info()"
      ],
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 31465 entries, 0 to 31464\n",
            "Data columns (total 6 columns):\n",
            "SalesOrderID         31465 non-null int64\n",
            "CustomerFirstName    17463 non-null object\n",
            "CustomerLastName     17463 non-null object\n",
            "EmployeeFirstName    3806 non-null object\n",
            "EmployeeLastName     3806 non-null object\n",
            "ChannelType          31465 non-null object\n",
            "dtypes: int64(1), object(5)\n",
            "memory usage: 1.4+ MB\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BBPuJn114LIW",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "af90b629-a2bc-4e14-b6ae-0a2e3a2a06d4"
      },
      "source": [
        "# Combine first and last name in customers\n",
        "customers['EmployeeFullName'] = customers['EmployeeFirstName'] + \" \" + customers['EmployeeLastName']\n",
        "customers.head()"
      ],
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>SalesOrderID</th>\n",
              "      <th>CustomerFirstName</th>\n",
              "      <th>CustomerLastName</th>\n",
              "      <th>EmployeeFirstName</th>\n",
              "      <th>EmployeeLastName</th>\n",
              "      <th>ChannelType</th>\n",
              "      <th>EmployeeFullName</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>43659</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Tsvi</td>\n",
              "      <td>Reiter</td>\n",
              "      <td>B2B</td>\n",
              "      <td>Tsvi Reiter</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>43660</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Tsvi</td>\n",
              "      <td>Reiter</td>\n",
              "      <td>B2B</td>\n",
              "      <td>Tsvi Reiter</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>43661</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>José</td>\n",
              "      <td>Saraiva</td>\n",
              "      <td>B2B</td>\n",
              "      <td>José Saraiva</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>43662</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>José</td>\n",
              "      <td>Saraiva</td>\n",
              "      <td>B2B</td>\n",
              "      <td>José Saraiva</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>43663</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Linda</td>\n",
              "      <td>Mitchell</td>\n",
              "      <td>B2B</td>\n",
              "      <td>Linda Mitchell</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   SalesOrderID CustomerFirstName  ... ChannelType EmployeeFullName\n",
              "0         43659               NaN  ...         B2B      Tsvi Reiter\n",
              "1         43660               NaN  ...         B2B      Tsvi Reiter\n",
              "2         43661               NaN  ...         B2B     José Saraiva\n",
              "3         43662               NaN  ...         B2B     José Saraiva\n",
              "4         43663               NaN  ...         B2B   Linda Mitchell\n",
              "\n",
              "[5 rows x 7 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uL_a6Z3irY7G",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "2ddfc596-835c-4e3a-e9bb-f0322ad718ba"
      },
      "source": [
        "# Combine first and last name in employees\n",
        "employees['FullName'] = employees['FirstName']+ ' '+ employees['LastName']\n",
        "employees.head()"
      ],
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>FirstName</th>\n",
              "      <th>LastName</th>\n",
              "      <th>CountryCode</th>\n",
              "      <th>RegionName</th>\n",
              "      <th>CommissionPct</th>\n",
              "      <th>FullName</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Amy</td>\n",
              "      <td>Alberts</td>\n",
              "      <td>GB</td>\n",
              "      <td>United Kingdom</td>\n",
              "      <td>0.000</td>\n",
              "      <td>Amy Alberts</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>David</td>\n",
              "      <td>Campbell</td>\n",
              "      <td>US</td>\n",
              "      <td>Northwest</td>\n",
              "      <td>0.012</td>\n",
              "      <td>David Campbell</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Garrett</td>\n",
              "      <td>Vargas</td>\n",
              "      <td>CA</td>\n",
              "      <td>Canada</td>\n",
              "      <td>0.010</td>\n",
              "      <td>Garrett Vargas</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Jae</td>\n",
              "      <td>Pak</td>\n",
              "      <td>CA</td>\n",
              "      <td>Canada</td>\n",
              "      <td>0.020</td>\n",
              "      <td>Jae Pak</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Jillian</td>\n",
              "      <td>Carson</td>\n",
              "      <td>US</td>\n",
              "      <td>Southwest</td>\n",
              "      <td>0.015</td>\n",
              "      <td>Jillian Carson</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "  FirstName  LastName  ... CommissionPct        FullName\n",
              "0       Amy   Alberts  ...         0.000     Amy Alberts\n",
              "1     David  Campbell  ...         0.012  David Campbell\n",
              "2   Garrett    Vargas  ...         0.010  Garrett Vargas\n",
              "3       Jae       Pak  ...         0.020         Jae Pak\n",
              "4   Jillian    Carson  ...         0.015  Jillian Carson\n",
              "\n",
              "[5 rows x 6 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "AOuJPAJO5N1t",
        "colab_type": "text"
      },
      "source": [
        "### Q&A time!"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qW0SStg_E-nJ",
        "colab_type": "text"
      },
      "source": [
        "## **Case studies**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GDQpEkCImzL9",
        "colab_type": "text"
      },
      "source": [
        "### _Q1: How did we do in revenue over the years?_"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mfBFUvPQXZyZ",
        "colab_type": "text"
      },
      "source": [
        "Since we have revenue data for each `SalesOrderID` in the `sales` sheet - and the order date and ship date for each `SalesOrderID` in hte `dates` sheet - we want to combine both DataFrames similar to how a VLOOKUP would work. \n",
        "\n",
        "<br>\n",
        "\n",
        "<p align=\"center\">\n",
        "<img src=\"https://github.com/adelnehme/python-for-spreadsheet-users-webinar/blob/master/pivots.png?raw=True\" alt = \"pivot\" width=\"70%\">\n",
        "</p>\n",
        "\n",
        "<br><br>\n",
        "\n",
        "In more technical terms, we want to perform of left join of both DataFrames where `SalesOrderId` is a common column between them.\n",
        "\n",
        "\n",
        "<p align=\"center\">\n",
        "<img src=\"https://github.com/adelnehme/python-for-spreadsheet-users-webinar/blob/master/left_join.png?raw=True\" alt = \"DataCamp icon\" width=\"50%\">\n",
        "</p>\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "An example of how to merge a DataFrame in pandas is included below with the `.merge()` method, where we are merging `df_2` into `df_1` on a common column between them called `common_column`. The `how` argument determines which DataFrame to preserve - in this case it's `df_1` since it's on the **left**. This has the same logic as SQL joins as well.\n",
        "\n",
        "`df_1.merge(df_2, on = 'common_column', how = 'left')`\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GdhvX_CB4LF5",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 225
        },
        "outputId": "6c06684d-3aa3-4904-f70c-fda57a700719"
      },
      "source": [
        "# Merge data - the VLOOKUP of Excel\n",
        "sales_date = sales.merge(dates, on  = 'SalesOrderID', how = 'left')\n",
        "sales_date.head()"
      ],
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "ERROR! Session/line number was not unique in database. History logging moved to new session 65\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>SalesOrderID</th>\n",
              "      <th>TotalDue</th>\n",
              "      <th>NumberofItems</th>\n",
              "      <th>OnlineOrderFlag</th>\n",
              "      <th>OrderDate</th>\n",
              "      <th>ShipDate</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>43659</td>\n",
              "      <td>23153.2339</td>\n",
              "      <td>12</td>\n",
              "      <td>offline</td>\n",
              "      <td>2011-05-31</td>\n",
              "      <td>2011-06-07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>43660</td>\n",
              "      <td>1457.3288</td>\n",
              "      <td>2</td>\n",
              "      <td>offline</td>\n",
              "      <td>2011-05-31</td>\n",
              "      <td>2011-06-07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>43661</td>\n",
              "      <td>36865.8012</td>\n",
              "      <td>15</td>\n",
              "      <td>offline</td>\n",
              "      <td>2011-05-31</td>\n",
              "      <td>2011-06-07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>43662</td>\n",
              "      <td>32474.9324</td>\n",
              "      <td>22</td>\n",
              "      <td>offline</td>\n",
              "      <td>2011-05-31</td>\n",
              "      <td>2011-06-07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>43663</td>\n",
              "      <td>472.3108</td>\n",
              "      <td>1</td>\n",
              "      <td>offline</td>\n",
              "      <td>2011-05-31</td>\n",
              "      <td>2011-06-07</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   SalesOrderID    TotalDue  ...  OrderDate   ShipDate\n",
              "0         43659  23153.2339  ... 2011-05-31 2011-06-07\n",
              "1         43660   1457.3288  ... 2011-05-31 2011-06-07\n",
              "2         43661  36865.8012  ... 2011-05-31 2011-06-07\n",
              "3         43662  32474.9324  ... 2011-05-31 2011-06-07\n",
              "4         43663    472.3108  ... 2011-05-31 2011-06-07\n",
              "\n",
              "[5 rows x 6 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2L-Efjpx4LDN",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "cd1843f0-d896-4f64-a59b-bb24e2a100c5"
      },
      "source": [
        "# Create column for year and month\n",
        "sales_date['OrderYear'] = sales_date['OrderDate'].dt.year\n",
        "sales_date['OrderYM'] = sales_date['OrderDate'].dt.strftime('%Y-%m')\n",
        "sales_date.head()"
      ],
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>SalesOrderID</th>\n",
              "      <th>TotalDue</th>\n",
              "      <th>NumberofItems</th>\n",
              "      <th>OnlineOrderFlag</th>\n",
              "      <th>OrderDate</th>\n",
              "      <th>ShipDate</th>\n",
              "      <th>OrderYear</th>\n",
              "      <th>OrderYM</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>43659</td>\n",
              "      <td>23153.2339</td>\n",
              "      <td>12</td>\n",
              "      <td>offline</td>\n",
              "      <td>2011-05-31</td>\n",
              "      <td>2011-06-07</td>\n",
              "      <td>2011</td>\n",
              "      <td>2011-05</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>43660</td>\n",
              "      <td>1457.3288</td>\n",
              "      <td>2</td>\n",
              "      <td>offline</td>\n",
              "      <td>2011-05-31</td>\n",
              "      <td>2011-06-07</td>\n",
              "      <td>2011</td>\n",
              "      <td>2011-05</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>43661</td>\n",
              "      <td>36865.8012</td>\n",
              "      <td>15</td>\n",
              "      <td>offline</td>\n",
              "      <td>2011-05-31</td>\n",
              "      <td>2011-06-07</td>\n",
              "      <td>2011</td>\n",
              "      <td>2011-05</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>43662</td>\n",
              "      <td>32474.9324</td>\n",
              "      <td>22</td>\n",
              "      <td>offline</td>\n",
              "      <td>2011-05-31</td>\n",
              "      <td>2011-06-07</td>\n",
              "      <td>2011</td>\n",
              "      <td>2011-05</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>43663</td>\n",
              "      <td>472.3108</td>\n",
              "      <td>1</td>\n",
              "      <td>offline</td>\n",
              "      <td>2011-05-31</td>\n",
              "      <td>2011-06-07</td>\n",
              "      <td>2011</td>\n",
              "      <td>2011-05</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   SalesOrderID    TotalDue  NumberofItems  ...   ShipDate OrderYear  OrderYM\n",
              "0         43659  23153.2339             12  ... 2011-06-07      2011  2011-05\n",
              "1         43660   1457.3288              2  ... 2011-06-07      2011  2011-05\n",
              "2         43661  36865.8012             15  ... 2011-06-07      2011  2011-05\n",
              "3         43662  32474.9324             22  ... 2011-06-07      2011  2011-05\n",
              "4         43663    472.3108              1  ... 2011-06-07      2011  2011-05\n",
              "\n",
              "[5 rows x 8 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "j8YLYLe4Zs_d",
        "colab_type": "text"
      },
      "source": [
        "To calculate the total revenue per year, we need to perform something like a PIVOT TABLE in spreadsheet softwares. In pandas, there's a variety of ways to acheive this - there is even a `.pivot_table()` method. However we will be using instead the `.groupby()` method which takes in as argument the column name being grouped by, and can be chained with other methods to compute interesting statistics. Here's an example of grouping by the column `col_A` of the example DataFrame `df_1` and computing the sum of the remaining columns:\n",
        "\n",
        "`df_1.groupby('col_A').sum()`"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NLpVQ5OY4LAp",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 175
        },
        "outputId": "a7d799ec-8f20-45a6-ff6a-190b7885fcb3"
      },
      "source": [
        "# Extract revenue by year\n",
        "sales_by_year = sales_date.groupby('OrderYear').sum().reset_index()\n",
        "sales_by_year.head()"
      ],
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>OrderYear</th>\n",
              "      <th>SalesOrderID</th>\n",
              "      <th>TotalDue</th>\n",
              "      <th>NumberofItems</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2011</td>\n",
              "      <td>71450434</td>\n",
              "      <td>1.415570e+07</td>\n",
              "      <td>5716</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2012</td>\n",
              "      <td>184878045</td>\n",
              "      <td>3.767570e+07</td>\n",
              "      <td>21689</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2013</td>\n",
              "      <td>798042413</td>\n",
              "      <td>4.896589e+07</td>\n",
              "      <td>56573</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2014</td>\n",
              "      <td>814366923</td>\n",
              "      <td>2.241950e+07</td>\n",
              "      <td>37339</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   OrderYear  SalesOrderID      TotalDue  NumberofItems\n",
              "0       2011      71450434  1.415570e+07           5716\n",
              "1       2012     184878045  3.767570e+07          21689\n",
              "2       2013     798042413  4.896589e+07          56573\n",
              "3       2014     814366923  2.241950e+07          37339"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 36
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0Cp3cw-ha_rV",
        "colab_type": "text"
      },
      "source": [
        "There are many ways to perform visualizations in Python - the two most widely used visualization packages are `seaborn` (which is usually imported as `sns`) and `matplotlib.pyplot` (which is usually imported as `plt`). \n",
        "\n",
        "Without going into the details, we will be creating and customizing two types of visualizations in this notebook by using these functions:\n",
        "\n",
        "- Barplots using `sns.barplot(x=,y=,data=)`\n",
        "  - `x`: The column name to be used on the x-axis.\n",
        "  - `y`: The column name to be used on the y-axis.\n",
        "  - `data`: The data used to visualize\n",
        "- Lineplots using `sns.lineplot(x=,y=,data=)`\n",
        "  - `x`: The column name to be used on the x-axis.\n",
        "  - `y`: The column name to be used on the y-axis.\n",
        "  - `data`: The data used to visualize\n",
        "- Setting figure labels by:\n",
        "  - `plt.xlabel()` to set the x-axis label.\n",
        "  - `plt.ylabel()` to set the y-axis label.\n",
        "  - `plt.title()` to set the x-axis label.\n",
        "  - `plt.xticks(rotation=)` to set the x-axis ticks with proper rotation\n",
        "- Showing the plot with `plt.show()`"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Ns-Vc_GS4K-b",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "outputId": "a6322a0e-acc5-453a-e6b2-50a814d19826"
      },
      "source": [
        "# Visualize it\n",
        "sns.barplot(x = 'OrderYear', y = 'TotalDue', data = sales_by_year)\n",
        "plt.xlabel('Years')\n",
        "plt.ylabel('Revenue')\n",
        "plt.title('Revenue over the years')\n",
        "plt.show()\n",
        "\n",
        "\n",
        "\n"
      ],
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXgAAAEWCAYAAABsY4yMAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjEsIGh0\ndHA6Ly9tYXRwbG90bGliLm9yZy+j8jraAAAVjklEQVR4nO3de7QlZX3m8e9DNwmCgCIngCC0IQoh\nKpe0iIMjhISIibfxChNRMyhrzVJHHS8JM7PwmmRGHS8r0RXby0JFRLxFQpYiXhBFozYXHRARRiCg\nQDfDHUSB/s0fVS2b4+nuTZ9dZ59+z/ez1l5du6r2W7+qc/rZtd+q8+5UFZKk9mw17QIkScMw4CWp\nUQa8JDXKgJekRhnwktQoA16SGmXAS1OQ5CVJvjXtOtQ2A16/luTKJL9IcnuS65KclOTB065rS5dk\nRZJKsnzatWhpMeA129Or6sHAAcCBwAlTrmeL0nKIt7xvrTLgNaequg44ky7oAUhySJJvJ7k5yQ+S\nHN7Pf0GS1aOvT/KaJKf307+d5J1J/i3J9Un+McmD+mWHJ7kmyWuTrElybZK/HGnn7CQvHXl+v66N\nJPsmOSvJjUkuTfL8De1TkocnOb1f9/IkLxuZ/4skO42se2CSG5Js3T//T0kuSXJTkjOT7DWybiV5\neZLLgMvm2PQ5/b8395+Onjjy2nf2bV6R5Kkj83dM8uH+ePwsyduSLJtjn3ZNcmeSh43MOyjJ2jFr\nf2+Sq5PcmuS8JP9+ZNmbknwmyclJbgVekuTgJKv79a9P8q4NHW9NnwGvOSXZA3gqcHn/fHfgX4C3\nATsBrwM+m2QG+GdgnySPGmniPwKn9NP/E3g03ZvF7wG7AyeOrLsrsGM//zjgfUkeOkaN2wFn9dv5\nHeBo4P1J9tvAS04FrgEeDjwX+NskR1TVz4HvAM+ZVf9nquruJM8E/hvwbGAG+CbwyVltPwt4AjDX\ntp/c//uQqnpwVX2nf/4E4FJgZ+DtwIeTpF92EnAP3fE6EPhT4NdvdOv1b8RnA6NvbMcCp45Z+/fp\nfi470R3HTyfZZmT5M4HPAA8BPgG8F3hvVe0A7A2cNsf+arGoqkX1AD4CrAEuGmPddwMX9o+fADdP\nu/4t+QFcCdwO3AYU8FW6UAL4K+Djs9Y/E3hxP30ycGI//ai+jW2BAHcAe4+87onAFf304cAvgOUj\n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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pTdxEPc94K82",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "cfad9cbd-cdc0-4c2b-ee33-a0535a19b0ae"
      },
      "source": [
        "# Is there seasonality?\n",
        "sales_by_year_month = sales_date.groupby('OrderYM').sum().reset_index()\n",
        "sales_by_year_month.head()"
      ],
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>OrderYM</th>\n",
              "      <th>SalesOrderID</th>\n",
              "      <th>TotalDue</th>\n",
              "      <th>NumberofItems</th>\n",
              "      <th>OrderYear</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2011-05</td>\n",
              "      <td>1878240</td>\n",
              "      <td>5.670209e+05</td>\n",
              "      <td>357</td>\n",
              "      <td>86473</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2011-06</td>\n",
              "      <td>6171852</td>\n",
              "      <td>5.070965e+05</td>\n",
              "      <td>141</td>\n",
              "      <td>283551</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2011-07</td>\n",
              "      <td>10154298</td>\n",
              "      <td>2.292183e+06</td>\n",
              "      <td>941</td>\n",
              "      <td>464541</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2011-08</td>\n",
              "      <td>11049625</td>\n",
              "      <td>2.800576e+06</td>\n",
              "      <td>1242</td>\n",
              "      <td>502750</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2011-09</td>\n",
              "      <td>6971114</td>\n",
              "      <td>5.547916e+05</td>\n",
              "      <td>157</td>\n",
              "      <td>315727</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   OrderYM  SalesOrderID      TotalDue  NumberofItems  OrderYear\n",
              "0  2011-05       1878240  5.670209e+05            357      86473\n",
              "1  2011-06       6171852  5.070965e+05            141     283551\n",
              "2  2011-07      10154298  2.292183e+06            941     464541\n",
              "3  2011-08      11049625  2.800576e+06           1242     502750\n",
              "4  2011-09       6971114  5.547916e+05            157     315727"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 45
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "awDjxQx14K7J",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 431
        },
        "outputId": "dd980e22-55a5-4063-894e-76b29778deeb"
      },
      "source": [
        "# Visualize it\n",
        "plt.figure(figsize = (18, 6))\n",
        "sns.lineplot(x = 'OrderYM', y = 'TotalDue', data = sales_by_year_month)\n",
        "plt.xlabel('Year (and months')\n",
        "plt.ylabel('Revenue')\n",
        "plt.title('Revenue over months and years')\n",
        "plt.xticks(rotation = 45)\n",
        "plt.show()"
      ],
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nokknIVshiIiIiIiIiCg5JFzFAhERERERERElDyYWiIiIiIiIiChqaVYHMFRRUZGqrKy0OgwiIiIi\nIiIiGmLHjh2tSqni4R5LqMRCZWUltm/fbnUYRERERERERDSEiBwb6TG2QhARERERERFR1JhYICIi\nIiIiIqKoMbFARERERERERFFjYoGIiIiIiIiIosbEAhERERERERFFjYkFIiIiIiIiIooaEwtERERE\nREREFDUmFoiIiIiIiIgoakwsEBEREREREVHUmFggIiIiIiIioqgxsUBEREREREREUWNigYiIiIiI\niIiixsQCERERERERTcibh1vxmQe3YTCsrA6FLGBqYkFE/kFE9olIjYg8KiIOM89HRERERERE8ffq\nwRZsedeLFn/Q6lDIAqYlFkRkGoB7AKxSSi0GYAdwi1nnIyIiIiIiImt4fVpCoamrz+JIyApmt0Kk\nAcgSkTQA2QAaTT4fERERERERxZnHFwAANHUFLI6ErGBaYkEp1QDgRwCOA2gC0KWUeunM54nInSKy\nXUS2t7S0mBUOERERERERmcTrNyoWmFhIRWa2QkwBcCOAmQDKAOSIyG1nPk8p9YBSapVSalVxcbFZ\n4RAREREREZFJjIqFZrZCpCQzWyGuAHBUKdWilBoA8ASA80w8HxEREREREcVZb38I/kAIACsWUpWZ\niYXjAM4RkWwREQCXAzhg4vmIiIiIiIgozozBjQDQzMRCSjJzxsI7ANYDqAawVz/XA2adj4iIiIiI\niOLPaIMozstkxUKKMnUrhFLqu0qp+UqpxUqpTyiluNSUiIiIiIhoEvHogxuXlhfA4wsgHFYWR0Tx\nZva6SSIiIiIiIprEvHrFwrIKJ0JhhdYe3k9ONUwsEBERERERUdQ8vgAy02yYW5IHgHMWUhETC0RE\nRERERBQ1jy+IknwHygqyAHAzRCpiYoGIiIiIiIii5vUHUJKfiVKnAwArFlIREwtEREREREQUNa8v\nCFe+A4XZGciw21ixkIKYWCAiIiIiIqKoeXwBlOQ5YLMJSpyZaO7qszokijMmFoiIiIiIiCgq3cEQ\nevoHUZKfCQBw52exYiEFMbFAREREREREUfHoqyZL8rX5CqVOB5p9TCykGiYWiIiIiIiIKCpGYsGV\np1csOB1o6gpAKWVlWBRnTCwQERERERFRVLy+IADANaRioT8URkfvgJVhUZwxsUBERERERERROdUK\n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\n",
            "text/plain": [
              "<Figure size 1296x432 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uIsHEbLlFGtn",
        "colab_type": "text"
      },
      "source": [
        "### _Q2: How is revenue divided by channel type overall and over time?_"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mpmB3J_Kidx0",
        "colab_type": "text"
      },
      "source": [
        "Similar to how we merged the `sales` sheet with the `dates` sheet when answering Q1, we will be merging the `sales` sheet with the `customers` sheet to get the channel type, employee and customer names for each `SalesOrderID`.\n",
        "\n",
        "<br>\n",
        "\n",
        "<p align=\"center\">\n",
        "<img src=\"https://github.com/adelnehme/python-for-spreadsheet-users-webinar/blob/master/pivots2.png?raw=True\" alt = \"pivot\" width=\"70%\">\n",
        "</p>\n",
        "\n",
        "<br>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "V2_olMaI4K5Q",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "3fb77279-e129-4bd7-8d69-ffd679a38165"
      },
      "source": [
        "# Merge sales and customer data\n",
        "sales_customers = sales.merge(customers, on = 'SalesOrderID', how = 'left')\n",
        "sales_customers.head()"
      ],
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>SalesOrderID</th>\n",
              "      <th>TotalDue</th>\n",
              "      <th>NumberofItems</th>\n",
              "      <th>OnlineOrderFlag</th>\n",
              "      <th>CustomerFirstName</th>\n",
              "      <th>CustomerLastName</th>\n",
              "      <th>EmployeeFirstName</th>\n",
              "      <th>EmployeeLastName</th>\n",
              "      <th>ChannelType</th>\n",
              "      <th>EmployeeFullName</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>43659</td>\n",
              "      <td>23153.2339</td>\n",
              "      <td>12</td>\n",
              "      <td>offline</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Tsvi</td>\n",
              "      <td>Reiter</td>\n",
              "      <td>B2B</td>\n",
              "      <td>Tsvi Reiter</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>43660</td>\n",
              "      <td>1457.3288</td>\n",
              "      <td>2</td>\n",
              "      <td>offline</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Tsvi</td>\n",
              "      <td>Reiter</td>\n",
              "      <td>B2B</td>\n",
              "      <td>Tsvi Reiter</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>43661</td>\n",
              "      <td>36865.8012</td>\n",
              "      <td>15</td>\n",
              "      <td>offline</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>José</td>\n",
              "      <td>Saraiva</td>\n",
              "      <td>B2B</td>\n",
              "      <td>José Saraiva</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>43662</td>\n",
              "      <td>32474.9324</td>\n",
              "      <td>22</td>\n",
              "      <td>offline</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>José</td>\n",
              "      <td>Saraiva</td>\n",
              "      <td>B2B</td>\n",
              "      <td>José Saraiva</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>43663</td>\n",
              "      <td>472.3108</td>\n",
              "      <td>1</td>\n",
              "      <td>offline</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Linda</td>\n",
              "      <td>Mitchell</td>\n",
              "      <td>B2B</td>\n",
              "      <td>Linda Mitchell</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   SalesOrderID    TotalDue  ...  ChannelType EmployeeFullName\n",
              "0         43659  23153.2339  ...          B2B      Tsvi Reiter\n",
              "1         43660   1457.3288  ...          B2B      Tsvi Reiter\n",
              "2         43661  36865.8012  ...          B2B     José Saraiva\n",
              "3         43662  32474.9324  ...          B2B     José Saraiva\n",
              "4         43663    472.3108  ...          B2B   Linda Mitchell\n",
              "\n",
              "[5 rows x 10 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 48
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rEDz2ZKo4KyG",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 112
        },
        "outputId": "71f0ad1e-f674-4583-cce9-7db5334a996b"
      },
      "source": [
        "# Identify revenue and amount sold by channel\n",
        "sales_by_channel = sales_customers.groupby('ChannelType').sum().reset_index()\n",
        "sales_by_channel.head()"
      ],
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ChannelType</th>\n",
              "      <th>SalesOrderID</th>\n",
              "      <th>TotalDue</th>\n",
              "      <th>NumberofItems</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>B2B</td>\n",
              "      <td>204462343</td>\n",
              "      <td>9.077545e+07</td>\n",
              "      <td>60919</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>B2C</td>\n",
              "      <td>1664275472</td>\n",
              "      <td>3.244134e+07</td>\n",
              "      <td>60398</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "  ChannelType  SalesOrderID      TotalDue  NumberofItems\n",
              "0         B2B     204462343  9.077545e+07          60919\n",
              "1         B2C    1664275472  3.244134e+07          60398"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 49
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "F01U4q9z4jff",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "outputId": "056a09a0-c25a-4c1e-a933-dd542445fa9a"
      },
      "source": [
        "# Visualize\n",
        "sns.barplot(x = 'ChannelType', y = 'TotalDue', data = sales_by_channel)\n",
        "plt.xlabel('Channel Type')\n",
        "plt.ylabel('Revenue')\n",
        "plt.title('Revenue by Channel Type')\n",
        "plt.show()"
      ],
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXgAAAEWCAYAAABsY4yMAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjEsIGh0\ndHA6Ly9tYXRwbG90bGliLm9yZy+j8jraAAAWO0lEQVR4nO3deZhldX3n8fdHGlkFVMoFVJogi6gs\n2iouIyiIy2iIjgsqQRRlZpIYNdG4jIMmk8wQw4yaiY5pxSCIIiAYoxHEpd2CaDegsrigqCAijZF9\nEfA7f5xTervo6r5U1emq/tX79Tz36bOf77l1+3PP/Z0tVYUkqT33mO8CJEnDMOAlqVEGvCQ1yoCX\npEYZ8JLUKANekhplwKs5SVYkeWVr67o7klSSh853HZpfBvwilOTHSW5JcmOSq5Icn2Tr+a5rIUpy\nzyRvT/KDJDf1790Hkyyd79pmIslF/d/9xiR3Jrl1pP8t812f5pYBv3g9p6q2BvYB9gXePM/1LFSn\nAb8PvATYFtgbWAUcOJ9FzVRVPbyqtu7/9l8B/mSyv6r+53zXp7llwC9yVXUVcBZd0AOQZL8k/5bk\n2iTfSnJAP/xFSVaOzp/kdUk+2XdvluTYJD9N8osk70uyRT/ugCRXJPnzJFcn+XmSl48sZ42mjiRH\nJPnqSP8eSc5O8u9JvpfkhevZtF2SfCPJ9Un+Ocl9+uV8Osmrp2zDt5M8d+oCkhwEPA04pKq+WVV3\nVNV1VfWeqjpuZNKdknwtyQ1JPptk+5FlnNr/SrouyZeTPHxk3PFJ3tPXdEOSc5PsMjK+kvyX/tfD\ntf20GRn/iiSXJPlVkrOS7LSe92RaSS5M8pyR/k2TXJNk3yRL+1qOSnJl/7d7/ci090jypiQ/TPLL\nJKdMvt+aXwb8IpfkQcAzgUv7/h2BTwN/DdwHeD3w8SQTwL8AuyfZdWQRLwE+0ncfA+xG92XxUGBH\n4OiRaR9Atxe8I3Ak8J4k9x6jxq2As/v13A84FHhvkj3XMdvhwCuABwJ3AH/fD/8QcNjIsvfu6/n0\nWpZxEPCNqrp8PSW+BHh5X9s96d6zSZ8Bdu3HnQecNGXeQ4G/BO5N9zf4mynjnw08BtgLeCHw9L7u\nQ4C3AM8DJuj2xj+6njrX5QRG3hfgWcDPq+r8kWFP6bflYOCN/RcgwKuBPwD2B3YAfgW8Zxa1aK5U\n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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Kql3u8DH4jc4",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 226
        },
        "outputId": "28f7e0d5-24b8-482c-bc4b-9fdda09fa646"
      },
      "source": [
        "# Merge sales, dates and customers data\n",
        "sales_customers_date = sales_date.merge(customers, on = 'SalesOrderID', how = 'left')\n",
        "sales_customers_date.head()"
      ],
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>SalesOrderID</th>\n",
              "      <th>TotalDue</th>\n",
              "      <th>NumberofItems</th>\n",
              "      <th>OnlineOrderFlag</th>\n",
              "      <th>OrderDate</th>\n",
              "      <th>ShipDate</th>\n",
              "      <th>OrderYear</th>\n",
              "      <th>OrderYM</th>\n",
              "      <th>CustomerFirstName</th>\n",
              "      <th>CustomerLastName</th>\n",
              "      <th>EmployeeFirstName</th>\n",
              "      <th>EmployeeLastName</th>\n",
              "      <th>ChannelType</th>\n",
              "      <th>EmployeeFullName</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>43659</td>\n",
              "      <td>23153.2339</td>\n",
              "      <td>12</td>\n",
              "      <td>offline</td>\n",
              "      <td>2011-05-31</td>\n",
              "      <td>2011-06-07</td>\n",
              "      <td>2011</td>\n",
              "      <td>2011-05</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Tsvi</td>\n",
              "      <td>Reiter</td>\n",
              "      <td>B2B</td>\n",
              "      <td>Tsvi Reiter</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>43660</td>\n",
              "      <td>1457.3288</td>\n",
              "      <td>2</td>\n",
              "      <td>offline</td>\n",
              "      <td>2011-05-31</td>\n",
              "      <td>2011-06-07</td>\n",
              "      <td>2011</td>\n",
              "      <td>2011-05</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Tsvi</td>\n",
              "      <td>Reiter</td>\n",
              "      <td>B2B</td>\n",
              "      <td>Tsvi Reiter</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>43661</td>\n",
              "      <td>36865.8012</td>\n",
              "      <td>15</td>\n",
              "      <td>offline</td>\n",
              "      <td>2011-05-31</td>\n",
              "      <td>2011-06-07</td>\n",
              "      <td>2011</td>\n",
              "      <td>2011-05</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>José</td>\n",
              "      <td>Saraiva</td>\n",
              "      <td>B2B</td>\n",
              "      <td>José Saraiva</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>43662</td>\n",
              "      <td>32474.9324</td>\n",
              "      <td>22</td>\n",
              "      <td>offline</td>\n",
              "      <td>2011-05-31</td>\n",
              "      <td>2011-06-07</td>\n",
              "      <td>2011</td>\n",
              "      <td>2011-05</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>José</td>\n",
              "      <td>Saraiva</td>\n",
              "      <td>B2B</td>\n",
              "      <td>José Saraiva</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>43663</td>\n",
              "      <td>472.3108</td>\n",
              "      <td>1</td>\n",
              "      <td>offline</td>\n",
              "      <td>2011-05-31</td>\n",
              "      <td>2011-06-07</td>\n",
              "      <td>2011</td>\n",
              "      <td>2011-05</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Linda</td>\n",
              "      <td>Mitchell</td>\n",
              "      <td>B2B</td>\n",
              "      <td>Linda Mitchell</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   SalesOrderID    TotalDue  ...  ChannelType EmployeeFullName\n",
              "0         43659  23153.2339  ...          B2B      Tsvi Reiter\n",
              "1         43660   1457.3288  ...          B2B      Tsvi Reiter\n",
              "2         43661  36865.8012  ...          B2B     José Saraiva\n",
              "3         43662  32474.9324  ...          B2B     José Saraiva\n",
              "4         43663    472.3108  ...          B2B   Linda Mitchell\n",
              "\n",
              "[5 rows x 14 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 51
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Cw4oqqKe4jaz",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "9d6abf11-c756-4895-aea2-d6f789b7c6f8"
      },
      "source": [
        "# Group by year by channel type\n",
        "sales_by_channel_date = sales_customers_date.groupby(['OrderYear', 'ChannelType']).sum().reset_index()\n",
        "sales_by_channel_date.head()"
      ],
      "execution_count": 53,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>OrderYear</th>\n",
              "      <th>ChannelType</th>\n",
              "      <th>SalesOrderID</th>\n",
              "      <th>TotalDue</th>\n",
              "      <th>NumberofItems</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2011</td>\n",
              "      <td>B2B</td>\n",
              "      <td>17999103</td>\n",
              "      <td>9.886952e+06</td>\n",
              "      <td>4515</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2011</td>\n",
              "      <td>B2C</td>\n",
              "      <td>53451331</td>\n",
              "      <td>4.268748e+06</td>\n",
              "      <td>1201</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2012</td>\n",
              "      <td>B2B</td>\n",
              "      <td>55440422</td>\n",
              "      <td>3.061409e+07</td>\n",
              "      <td>18946</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2012</td>\n",
              "      <td>B2C</td>\n",
              "      <td>129437623</td>\n",
              "      <td>7.061613e+06</td>\n",
              "      <td>2743</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2013</td>\n",
              "      <td>B2B</td>\n",
              "      <td>87767978</td>\n",
              "      <td>3.710689e+07</td>\n",
              "      <td>27614</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   OrderYear ChannelType  SalesOrderID      TotalDue  NumberofItems\n",
              "0       2011         B2B      17999103  9.886952e+06           4515\n",
              "1       2011         B2C      53451331  4.268748e+06           1201\n",
              "2       2012         B2B      55440422  3.061409e+07          18946\n",
              "3       2012         B2C     129437623  7.061613e+06           2743\n",
              "4       2013         B2B      87767978  3.710689e+07          27614"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 53
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9cWRLNkV4jYm",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "outputId": "7ce1ea00-b9c5-4fe7-a97f-a128c438e744"
      },
      "source": [
        "# Visualize\n",
        "sns.barplot(x = 'OrderYear', y = 'TotalDue', data = sales_by_channel_date, hue='ChannelType')\n",
        "plt.xlabel('Channel Type over the years')\n",
        "plt.ylabel('Revenue')\n",
        "plt.title('Revenue by channel type over the years')\n",
        "plt.show()\n"
      ],
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYIAAAEWCAYAAABrDZDcAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjEsIGh0\ndHA6Ly9tYXRwbG90bGliLm9yZy+j8jraAAAgAElEQVR4nO3de5xd873/8dc7IzKoS5tM3ZIIETRC\nQkbc2tOUqkuVupafIG6ptnpap1X0ouroaas9rR5OEZeTRBVFaaoclxLKQTIIInGJa0Iw4hJBSOLz\n+2N9J3a2PTN7xqzZmaz38/HYj1mX71r7s76z9/7s73et/V2KCMzMrLh61ToAMzOrLScCM7OCcyIw\nMys4JwIzs4JzIjAzKzgnAjOzgnMisC4haYqkY3N+jgmSzszzOTpD0rOSvljrOFZkkk6X9Mdax2GV\nORF0k/Rh8a6khZJeSh9qn6h1XJavFTV55UnSaElzax2HVc+JoHt9JSI+AYwAtgFOrXE8Zh+LpFVq\nHUNeJNXVOobu4kRQAxHxEnATWUIAQNIOkv5P0huSHpI0Oi3/mqSm0u0lnShpcpruI+k3kp6X9LKk\n8yWtltaNljRX0vckvSJpnqSjSvazXHeOpLGS7iqZ30LSLZJek/S4pIPbObTBkqZKWiDpr5I+lfbz\nd0nfLjuGhyXtV2knkj5bUhdzJI0tWf3JtL+3JN0naXDJdr9P5RdIul/S50rWnS7pz5ImpW0fldRY\nsv5ZSd9Pcb0p6UpJ9SXr95Y0PcX0f5K2bqcukDQOOAz4QWoJ/k3SSZKuKSv3X5J+n6anSPpFpXpM\n6yu+Tlp5/s+k/b2RjneftHz71CqtKym7n6SH03QvSadIekrS/FRvLf/LQZJC0jGSngduK3vONYAb\ngQ3SMS+UtEFavWob9b+BpGskNUt6RtK/tnJM26XXeWns+0t6qL3Y0/qr0rG/KelOSVuWrJsg6TxJ\nN0h6G/iCpL0kzUwxvyDp+63Vd48WEX50wwN4Fvhimu4PPAL8Ps1vCMwH9iJLzrul+QZgdeAtYEjJ\nvqYBh6Tp3wGTgU8BawJ/A36R1o0GlgBnAL3T/t8BPpnWTwGOLdnvWOCuNL0GMAc4CliFrAXzKjC0\nleObArwADEvbXgP8Ma07GLivpOzwdHyrVtjPRul4D00x9wVGpHUT0najUkyXAVeUbDsmlV8F+B7w\n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\nd+uxXUNmZtY1emSLwMzMuk6P+x1Bv379YtCgQbUOw8ysR7n//vtfjYiGSut6XCIYNGgQTU1N7Rc0\nM7Nl0g8IK3LXkJlZwTkRmJkVnBOBmVnB9bhzBGZmixcvZu7cuSxatKjWoaxw6uvr6d+/P7179656\nGycCM+tx5s6dy5prrsmgQYOQumKA2ZVDRDB//nzmzp3LxhtvXPV27hoysx5n0aJF9O3b10mgjCT6\n9u3b4ZaSE4GZ9UhOApV1pl6cCMzMCs6JwMxWGi+99BKHHHIIgwcPZuTIkey1116MHz+evffeu2Yx\njR49mqamJrbffntGjBjBwIEDaWhoYMSIEYwYMYJnn322ZrG18Mlis2408qRJtQ6B+399RK1DyEVE\nsN9++3HkkUdyxRXZjdgeeughJk+eXOPIMvfddx8AEyZMoKmpiXPPPbfGEX3ILQIzWyncfvvt9O7d\nm+OPP37ZsuHDh/O5z32OhQsXcuCBB7LFFltw2GGH0TLq8hlnnMF2223HsGHDGDdu3LLlo0eP5uST\nT2bUqFFsttlm/POf/wSyD/H999+fPfbYgyFDhvCDH3x4u+mbb76ZHXfckW233ZaDDjqIhQsXthnv\nBx98wJAhQ2hubl42v+mmm9Lc3MzYsWM5/vjjaWxsZLPNNuP6668HYOnSpZx00klst912bL311lxw\nwQVdUndOBGa2UpgxYwYjR46suO7BBx/k7LPPZubMmTz99NPcfXd2b/sTTjiBadOmMWPGDN59991l\nH7gAS5YsYerUqZx99tn87Gc/W7Z8+vTpXHnllTzyyCNceeWVzJkzh1dffZUzzzyTW2+9lQceeIDG\nxkZ++9vfthlvr169GDNmDJddlt0h9tZbb2X48OE0NGTjwj377LNMnTqVv//97xx//PEsWrSIiy++\nmLXXXptp06Yxbdo0LrzwQp555pmPVW/gRGBmBTBq1Cj69+9Pr169luuXv/3229l+++3ZaqutuO22\n23j00UeXbbP//vsDMHLkyOX68XfddVfWXntt6uvrGTp0KM899xz33nsvM2fOZOedd2bEiBFMnDiR\n555rdYy3ZY4++mgmTcq6Cy+55BKOOuqoZesOPvhgevXqxZAhQ9hkk0147LHHuPnmm5k0aRIjRoxg\n++23Z/78+Tz55JMfu358jsDMVgpbbrklV199dcV1ffr0WTZdV1fHkiVLWLRoEd/85jdpampiwIAB\n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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tG5zLT6ilRUn",
        "colab_type": "text"
      },
      "source": [
        "### _Q3: Who are the employees responsible for the most B2B sales overall and in 2013?_"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gZ_gJa1UqOIK",
        "colab_type": "text"
      },
      "source": [
        "The `sales_customers_date` has already been created when we merged `sales` with `customers` and `dates` in Q1 and Q2\n",
        "\n",
        "```py\n",
        "# From Q1\n",
        "sales_date = sales.merge(dates, on=\"SalesOrderID\", how = \"left\")\n",
        "# From Q2\n",
        "sales_customers_date = sales_date.merge(customers, on = \"SalesOrderID\", how = \"left\")\n",
        "```"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "liJNxutK4rVG",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "669a614b-3af1-415f-e485-d14ff06f3285"
      },
      "source": [
        "# Group by employee performance Make new Data Frame\n",
        "sales_employees = sales_customers_date.groupby('EmployeeFullName').sum().reset_index()\n",
        "sales_employees.head()"
      ],
      "execution_count": 57,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>EmployeeFullName</th>\n",
              "      <th>SalesOrderID</th>\n",
              "      <th>TotalDue</th>\n",
              "      <th>NumberofItems</th>\n",
              "      <th>OrderYear</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Amy Alberts</td>\n",
              "      <td>2155978</td>\n",
              "      <td>8.264175e+05</td>\n",
              "      <td>586</td>\n",
              "      <td>78503</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>David Campbell</td>\n",
              "      <td>9966638</td>\n",
              "      <td>4.207895e+06</td>\n",
              "      <td>2247</td>\n",
              "      <td>380364</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Garrett Vargas</td>\n",
              "      <td>12415186</td>\n",
              "      <td>4.069422e+06</td>\n",
              "      <td>3284</td>\n",
              "      <td>470937</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Jae Pak</td>\n",
              "      <td>19195780</td>\n",
              "      <td>9.585125e+06</td>\n",
              "      <td>6738</td>\n",
              "      <td>700480</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Jillian Carson</td>\n",
              "      <td>24928694</td>\n",
              "      <td>1.134239e+07</td>\n",
              "      <td>7825</td>\n",
              "      <td>951928</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "  EmployeeFullName  SalesOrderID      TotalDue  NumberofItems  OrderYear\n",
              "0      Amy Alberts       2155978  8.264175e+05            586      78503\n",
              "1   David Campbell       9966638  4.207895e+06           2247     380364\n",
              "2   Garrett Vargas      12415186  4.069422e+06           3284     470937\n",
              "3          Jae Pak      19195780  9.585125e+06           6738     700480\n",
              "4   Jillian Carson      24928694  1.134239e+07           7825     951928"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 57
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "czsrlwlFlk_t",
        "colab_type": "text"
      },
      "source": [
        "To be able to truly see the highest earning employees - we can use the `.sort_values()` method of a DataFrame. For example, we can sort `col_A` of the example DataFrame `df_1` as such:\n",
        "\n",
        "`df_1.sort_values(by=,ascending=,inplace=)`\n",
        "\n",
        "* `by` takes in the column name being sorted by\n",
        "* `ascending` takes in `True` or `False` depending on whether we want to sort it by ascending order\n",
        "* `inplace` takes in `True` or `False` depending on whether we want to save our changes in the same DataFrame being sorted."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NBovRPzVFvoB",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "a9b21332-4627-45ee-e318-757a5187844c"
      },
      "source": [
        "# Sort it so we visualize it correctly\n",
        "sales_employees = sales_employees.sort_values(by = 'TotalDue', ascending = True)\n",
        "sales_employees.head()"
      ],
      "execution_count": 78,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>EmployeeFullName</th>\n",
              "      <th>OrderYear</th>\n",
              "      <th>SalesOrderID</th>\n",
              "      <th>TotalDue</th>\n",
              "      <th>NumberofItems</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>50</th>\n",
              "      <td>Syed Abbas</td>\n",
              "      <td>2014</td>\n",
              "      <td>282917</td>\n",
              "      <td>23922.1920</td>\n",
              "      <td>27</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45</th>\n",
              "      <td>Stephen Jiang</td>\n",
              "      <td>2011</td>\n",
              "      <td>176971</td>\n",
              "      <td>32567.9155</td>\n",
              "      <td>17</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Amy Alberts</td>\n",
              "      <td>2014</td>\n",
              "      <td>201955</td>\n",
              "      <td>63747.8429</td>\n",
              "      <td>30</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Amy Alberts</td>\n",
              "      <td>2012</td>\n",
              "      <td>335313</td>\n",
              "      <td>130667.0249</td>\n",
              "      <td>103</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>49</th>\n",
              "      <td>Syed Abbas</td>\n",
              "      <td>2013</td>\n",
              "      <td>681862</td>\n",
              "      <td>171606.5918</td>\n",
              "      <td>218</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   EmployeeFullName  OrderYear  SalesOrderID     TotalDue  NumberofItems\n",
              "50       Syed Abbas       2014        282917   23922.1920             27\n",
              "45    Stephen Jiang       2011        176971   32567.9155             17\n",
              "2       Amy Alberts       2014        201955   63747.8429             30\n",
              "0       Amy Alberts       2012        335313  130667.0249            103\n",
              "49       Syed Abbas       2013        681862  171606.5918            218"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 78
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GCJVo_6t4rS0",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 488
        },
        "outputId": "b8501358-0243-4ca8-b5df-e91be9c8bb25"
      },
      "source": [
        "# Visualize Note that the sort of the data and the format of the graph changed here after the class\n",
        "plt.figure(figsize = (18,6))\n",
        "sns.barplot(x = 'EmployeeFullName', y = 'TotalDue', data = sales_employees)\n",
        "plt.xticks(rotation = 45)\n",
        "plt.xlabel('Emloyee name')\n",
        "plt.ylabel('Revenue')\n",
        "plt.title('Revenue by employee')\n",
        "plt.show()"
      ],
      "execution_count": 79,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\ngiRJkiRJas3TTUqaVJ867kmdTPeGGxY2lyOdzeP5z/1uJ9OVJEmSZjJbLEiSJEmSpNYMFiRJkiRJ\nUmsGC5IkSZIkqTXHWJAkaTm164nHdDbtfy64AYDLF9zQyXy+8bQDJ32akiSpHVssSJIkSZKk1gwW\nJEmSJElSawYLkiRJkiSpNYMFSZIkSZLUmsGCJEmSJElqzWBBkiRJkiS1ZrAgSZIkSZJaM1iQJEmS\nJEmtGSxIkiRJkqTWDBYkSZIkSVJrs/suQJps8+bNY3R0lLlz5zJ//vy+y5Gkf1trVaK5nOlizdUX\nuZQkSTOXwYJmnNHRUUZGRvouQ5L+w0p7PLzvEqbMyrs/oe8SJEnSFLErhCRJkiRJas0WC5I0Da2y\nRgDZXM5sseYKZHMpSZKk4WOwIEnT0EOeMqvvEqbMinveo+8SJEmSdBd4eEiSJEmSJLVmsCBJkiRJ\nklozWJAkSZIkSa05xsJyYt68eYyOjjJ37lzmz5/fdzmSJEmSpBnCYGE5MTo6ysjISN9laJKttTpA\nNJeSJEmSNPUMFqQhtvcTVuq7BEmSJEnLOYMFSUNh9TUWvZQkSZI0PRgsSBoKO+w4q+8SJEmSJC2G\nZ4WQJEmSJEmtGSxIkiRJkqTWDBYkSZIkSVJrBguSJEmSJKk1gwVJkiRJktSawYIkSZIkSWrNYEGS\nJEmSJLVmsCBJkiRJklozWJAkSZIkSa3N7rsALeqKj72hk+kuvP6aOy67mse6Lz2yk+lKkiRJkqYv\nWyxIkiRJkqTWDBYkSZIkSVJrdoVQb87+3906me4t19/cXF7e2Twe+uJTOpmuJEmSJA0bWyxIkiRJ\nkqTWDBYkSZIkSVJrBguSJEmSJKk1gwVJkiRJktSawYIkSZIkSWptuT4rxLx58xgdHWXu3LnMnz+/\n73IkSZIkSRo6y3WwMDo6ysjISN9lSJIkSZI0tOwKIUmSJEmSWjNYkCRJkiRJrRksSJIkSZKk1pbr\nMRaWJ+ustvIil5IkSZIkTYZpHyxc9T8ndDbthdffeMdlV/OZ85L9Opnusnrddg/ouwRJkiRJ0gw0\n7YMFaVmtvXoscilJkiRJ6k6nwUJE7Ax8CJgFfDIz39Xl/CSAgx67St8lSJIkSdJyo7PBGyNiFvBR\nYBdgS+CZEbFlV/OTJEmSJElTr8uzQjwC+FNm/iUzbwW+AOzR4fwkSZIkSdIU6zJYWB+4dOD2Zc19\n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\nJEk6zf8DRA/FWtroNFAAAAAASUVORK5CYII=\n",
            "text/plain": [
              "<Figure size 1296x432 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JYIPZ1TL4rPp",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "0051e36f-b60d-4d36-fbbd-15b4554a64f6"
      },
      "source": [
        "# Group by employee performance and year\n",
        "sales_employees = sales_customers_date.groupby(['EmployeeFullName', 'OrderYear']).sum().reset_index()\n",
        "sales_employees.head()"
      ],
      "execution_count": 65,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>EmployeeFullName</th>\n",
              "      <th>OrderYear</th>\n",
              "      <th>SalesOrderID</th>\n",
              "      <th>TotalDue</th>\n",
              "      <th>NumberofItems</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Amy Alberts</td>\n",
              "      <td>2012</td>\n",
              "      <td>335313</td>\n",
              "      <td>1.306670e+05</td>\n",
              "      <td>103</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Amy Alberts</td>\n",
              "      <td>2013</td>\n",
              "      <td>1618710</td>\n",
              "      <td>6.320026e+05</td>\n",
              "      <td>453</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Amy Alberts</td>\n",
              "      <td>2014</td>\n",
              "      <td>201955</td>\n",
              "      <td>6.374784e+04</td>\n",
              "      <td>30</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>David Campbell</td>\n",
              "      <td>2011</td>\n",
              "      <td>1242002</td>\n",
              "      <td>6.756637e+05</td>\n",
              "      <td>220</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>David Campbell</td>\n",
              "      <td>2012</td>\n",
              "      <td>2978792</td>\n",
              "      <td>1.453583e+06</td>\n",
              "      <td>741</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "  EmployeeFullName  OrderYear  SalesOrderID      TotalDue  NumberofItems\n",
              "0      Amy Alberts       2012        335313  1.306670e+05            103\n",
              "1      Amy Alberts       2013       1618710  6.320026e+05            453\n",
              "2      Amy Alberts       2014        201955  6.374784e+04             30\n",
              "3   David Campbell       2011       1242002  6.756637e+05            220\n",
              "4   David Campbell       2012       2978792  1.453583e+06            741"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 65
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AYbLj8wHF7Id",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "de979b08-db80-40c3-bc1e-e5f039c6a098"
      },
      "source": [
        "# Sort to make it easier to visualize\n",
        "sales_employees.sort_values(by = ['OrderYear', 'TotalDue'], ascending= True, inplace= True)\n",
        "sales_employees.head()"
      ],
      "execution_count": 66,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>EmployeeFullName</th>\n",
              "      <th>OrderYear</th>\n",
              "      <th>SalesOrderID</th>\n",
              "      <th>TotalDue</th>\n",
              "      <th>NumberofItems</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>45</th>\n",
              "      <td>Stephen Jiang</td>\n",
              "      <td>2011</td>\n",
              "      <td>176971</td>\n",
              "      <td>32567.9155</td>\n",
              "      <td>17</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Garrett Vargas</td>\n",
              "      <td>2011</td>\n",
              "      <td>1329262</td>\n",
              "      <td>563326.5478</td>\n",
              "      <td>284</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>David Campbell</td>\n",
              "      <td>2011</td>\n",
              "      <td>1242002</td>\n",
              "      <td>675663.6940</td>\n",
              "      <td>220</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32</th>\n",
              "      <td>Pamela Ansman-Wolfe</td>\n",
              "      <td>2011</td>\n",
              "      <td>974811</td>\n",
              "      <td>730273.4889</td>\n",
              "      <td>273</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28</th>\n",
              "      <td>Michael Blythe</td>\n",
              "      <td>2011</td>\n",
              "      <td>2882387</td>\n",
              "      <td>986298.0902</td>\n",
              "      <td>623</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "       EmployeeFullName  OrderYear  SalesOrderID     TotalDue  NumberofItems\n",
              "45        Stephen Jiang       2011        176971   32567.9155             17\n",
              "7        Garrett Vargas       2011       1329262  563326.5478            284\n",
              "3        David Campbell       2011       1242002  675663.6940            220\n",
              "32  Pamela Ansman-Wolfe       2011        974811  730273.4889            273\n",
              "28       Michael Blythe       2011       2882387  986298.0902            623"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 66
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fCuXVq0l4rLx",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Who was the best last year?\n",
        "sales_employees_2013 = sales_employees[sales_employees['OrderYear'] == 2013]"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OEy96D3W4rJC",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 488
        },
        "outputId": "2df2887d-3d67-4f5a-a97b-af0d9c02d004"
      },
      "source": [
        "# Visualize\n",
        "plt.figure(figsize = (18,6))\n",
        "sns.barplot(x = 'EmployeeFullName', y = 'TotalDue', data = sales_employees_2013)\n",
        "plt.xticks(rotation = 45)\n",
        "plt.xlabel('Employee Name')\n",
        "plt.ylabel('Revenue')\n",
        "plt.title('Revenue by Sales Person')\n",
        "plt.show()"
      ],
      "execution_count": 77,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nkcBTAAAAAElFTkSuQmCC\n",
            "text/plain": [
              "<Figure size 1296x432 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pYDKDX3x6cXR",
        "colab_type": "text"
      },
      "source": [
        "### Q&A time!"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZiWyqK7RIelL",
        "colab_type": "text"
      },
      "source": [
        "### _Take-home question: Who were the highest earning (in compensation) employees in 2012?_"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QMAuLfrnnPBq",
        "colab_type": "text"
      },
      "source": [
        "**Clues:**\n",
        "- Compensation = Sales generated * Commission\n",
        "- You need to use the all four sheets\n",
        "- Sort your results by the amount of commission earned \n",
        "\n",
        "**Bonus points if:**\n",
        "- You make your chart extra pretty\n",
        "- Use syntax not covered in this session\n",
        "\n",
        "**Submission details:**\n",
        "- Share with us a code snippet with your output on LinkedIn, Twitter or Facebook\n",
        "- Tag us on `@DataCamp` with the hashtag `#datacamplive`\n"
      ]
    }
  ]
}
